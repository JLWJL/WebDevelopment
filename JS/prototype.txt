Term:
	1. prototype object:
		The object from which another object inherits properties and functions.
			
	2. prototype property:
		A property (or subnamespace) contains an OBJECT storing properties and methods that will be inherited by objects further down the prototype chain.

	

1. [[Prototype]] object:


/* ".__proto__" => access the [[Prototype]] of the object

	var date = new Date();
	date.__proto__; // --> Object { , 49 more… } === Date.prototype

	var me = new Object();
	me.__proto__; // --> Object { , 15 more… } === Object.prototype

	Note: Object.prototype only contains methods that can be inherited, excluding that defined in the constructor function
*/


2. "prototype" property
	/*
	Methods like "Object.prototype.valueOf()" will be inherited by all instances inherit from Object.
	Methods like "Object.is()" is defined in Object constructor and can just be used by Object itself.
	*/

	Object.prototype; //--> Object { , 15 more… } 
	//means that Object's prototype property is named exactly as "Object" and it contains 15 or more methods

	Number.prototype; // --> Number
	//means that Number's prototype property is named as "Number" and it also contains a number of methods.

	/*
		Note: By default, object.prototype === undefined.
	*/

3. "constructor" property
	/*
	Each object has a "constructor" that points to the original constructor function that created the object.
	*/

	var o = 22;
	o.constructor; // return function Number();
	o.constructor.name // return "Number"

	var p = new o.constructor(24);
	p; // 24;

4. Object.create(proto[,propertiesObject]): This method belongs to Object itself, it cannot be inherited because it is not in Object.prototype
	
	proto: [[Prototype]] object of the newly created obj
	propertiesObject: The properties that will ONLY belong to the newly-created object.

	function Person(){
		this.name = "AAA";
	};


	var person1 = new Person(); 
	/*
	Equals:
	person1.__proto__ = Person.prototype
	person1 can access to 'name' property
	*/

	var person2 = Object.create(Person.prototype); 	
	/*
	Equals:
	person2 = Person.prototype
	person2 can't access to 'name' property
	*/

	var person3 = Object.create(person1);	
	/*
	Equals:
	person3.__proto__ = person1
	person3 can access to 'name' property
	*/	

5. Modifying "prototype" property (Take "Person" as an example).

	/*Person.prototype is currently empty.*/

	
	Person.prototype.fullName = function(){...} 
	/*Adds a function 'fullName' to Person's prototype property.*/
	
	Person.prototyp.status ="Student" 
	/*adds a property 'status' to Person's prototype property.*/

	Normal practice:
		Define static properties within the constructor but define methods using 'prototype'.

